// Generated by github.com/davyxu/protoplus
// DO NOT EDIT!
package proto

import (
	"github.com/davyxu/protoplus/proto"
	"unsafe"
	"reflect"
	"github.com/davyxu/cellnet"
	"github.com/davyxu/cellnet/codec"
)

var (
	_ *proto.Buffer
	_ unsafe.Pointer
	_ cellnet.MessageMeta
	_ codec.CodecRecycler
	_ reflect.Kind
)

type ResultCode int32

const (
	ResultCode_NoError           ResultCode = 0
	ResultCode_AgentNotFound     ResultCode = 101
	ResultCode_AgentAddressError ResultCode = 102
	ResultCode_GameNotFound      ResultCode = 103
)

var (
	ResultCodeMapperValueByName = map[string]int32{
		"NoError":           0,
		"AgentNotFound":     101,
		"AgentAddressError": 102,
		"GameNotFound":      103,
	}

	ResultCodeMapperNameByValue = map[int32]string{
		0:   "NoError",
		101: "AgentNotFound",
		102: "AgentAddressError",
		103: "GameNotFound",
	}
)

func (self ResultCode) String() string {
	return ResultCodeMapperNameByValue[int32(self)]
}

type NodeKind int32

const (
	NodeKind_Listen  NodeKind = 0
	NodeKind_Connect NodeKind = 1
	NodeKind_Backend NodeKind = 2
	NodeKind_Accept  NodeKind = 3
	NodeKind_Monitor NodeKind = 4
)

var (
	NodeKindMapperValueByName = map[string]int32{
		"Listen":  0,
		"Connect": 1,
		"Backend": 2,
		"Accept":  3,
		"Monitor": 4,
	}

	NodeKindMapperNameByValue = map[int32]string{
		0: "Listen",
		1: "Connect",
		2: "Backend",
		3: "Accept",
		4: "Monitor",
	}
)

func (self NodeKind) String() string {
	return NodeKindMapperNameByValue[int32(self)]
}

type ServerInfo struct {
	IP   string
	Port int32
}

func (self *ServerInfo) String() string { return proto.CompactTextString(self) }

func (self *ServerInfo) Size() (ret int) {

	ret += proto.SizeString(1, self.IP)

	ret += proto.SizeInt32(2, self.Port)

	return
}

func (self *ServerInfo) Marshal(buffer *proto.Buffer) error {

	proto.MarshalString(buffer, 1, self.IP)

	proto.MarshalInt32(buffer, 2, self.Port)

	return nil
}

func (self *ServerInfo) Unmarshal(buffer *proto.Buffer, fieldIndex uint64, wt proto.WireType) error {
	switch fieldIndex {
	case 1:
		return proto.UnmarshalString(buffer, wt, &self.IP)
	case 2:
		return proto.UnmarshalInt32(buffer, wt, &self.Port)

	}

	return proto.ErrUnknownField
}

type VerifyREQ struct {
	Version  string
	Platform string
	UID      string
}

func (self *VerifyREQ) String() string { return proto.CompactTextString(self) }

func (self *VerifyREQ) Size() (ret int) {

	ret += proto.SizeString(1, self.Version)

	ret += proto.SizeString(2, self.Platform)

	ret += proto.SizeString(3, self.UID)

	return
}

func (self *VerifyREQ) Marshal(buffer *proto.Buffer) error {

	proto.MarshalString(buffer, 1, self.Version)

	proto.MarshalString(buffer, 2, self.Platform)

	proto.MarshalString(buffer, 3, self.UID)

	return nil
}

func (self *VerifyREQ) Unmarshal(buffer *proto.Buffer, fieldIndex uint64, wt proto.WireType) error {
	switch fieldIndex {
	case 1:
		return proto.UnmarshalString(buffer, wt, &self.Version)
	case 2:
		return proto.UnmarshalString(buffer, wt, &self.Platform)
	case 3:
		return proto.UnmarshalString(buffer, wt, &self.UID)

	}

	return proto.ErrUnknownField
}

type VerifyACK struct {
	Code   ResultCode
	Server ServerInfo
	Token  string // 登录game的token
	SvcID  string // 选中的一台game服务器ID
}

func (self *VerifyACK) String() string { return proto.CompactTextString(self) }

func (self *VerifyACK) Size() (ret int) {

	ret += proto.SizeInt32(1, int32(self.Code))

	ret += proto.SizeStruct(2, &self.Server)

	ret += proto.SizeString(3, self.Token)

	ret += proto.SizeString(4, self.SvcID)

	return
}

func (self *VerifyACK) Marshal(buffer *proto.Buffer) error {

	proto.MarshalInt32(buffer, 1, int32(self.Code))

	proto.MarshalStruct(buffer, 2, &self.Server)

	proto.MarshalString(buffer, 3, self.Token)

	proto.MarshalString(buffer, 4, self.SvcID)

	return nil
}

func (self *VerifyACK) Unmarshal(buffer *proto.Buffer, fieldIndex uint64, wt proto.WireType) error {
	switch fieldIndex {
	case 1:
		return proto.UnmarshalInt32(buffer, wt, (*int32)(&self.Code))
	case 2:
		return proto.UnmarshalStruct(buffer, wt, &self.Server)
	case 3:
		return proto.UnmarshalString(buffer, wt, &self.Token)
	case 4:
		return proto.UnmarshalString(buffer, wt, &self.SvcID)

	}

	return proto.ErrUnknownField
}

type PingACK struct {
}

func (self *PingACK) String() string { return proto.CompactTextString(self) }

func (self *PingACK) Size() (ret int) {

	return
}

func (self *PingACK) Marshal(buffer *proto.Buffer) error {

	return nil
}

func (self *PingACK) Unmarshal(buffer *proto.Buffer, fieldIndex uint64, wt proto.WireType) error {
	switch fieldIndex {

	}

	return proto.ErrUnknownField
}

type LoginREQ struct {
	SvcID string
	Token string
}

func (self *LoginREQ) String() string { return proto.CompactTextString(self) }

func (self *LoginREQ) Size() (ret int) {

	ret += proto.SizeString(1, self.SvcID)

	ret += proto.SizeString(2, self.Token)

	return
}

func (self *LoginREQ) Marshal(buffer *proto.Buffer) error {

	proto.MarshalString(buffer, 1, self.SvcID)

	proto.MarshalString(buffer, 2, self.Token)

	return nil
}

func (self *LoginREQ) Unmarshal(buffer *proto.Buffer, fieldIndex uint64, wt proto.WireType) error {
	switch fieldIndex {
	case 1:
		return proto.UnmarshalString(buffer, wt, &self.SvcID)
	case 2:
		return proto.UnmarshalString(buffer, wt, &self.Token)

	}

	return proto.ErrUnknownField
}

type LoginACK struct {
	Code ResultCode
}

func (self *LoginACK) String() string { return proto.CompactTextString(self) }

func (self *LoginACK) Size() (ret int) {

	ret += proto.SizeInt32(1, int32(self.Code))

	return
}

func (self *LoginACK) Marshal(buffer *proto.Buffer) error {

	proto.MarshalInt32(buffer, 1, int32(self.Code))

	return nil
}

func (self *LoginACK) Unmarshal(buffer *proto.Buffer, fieldIndex uint64, wt proto.WireType) error {
	switch fieldIndex {
	case 1:
		return proto.UnmarshalInt32(buffer, wt, (*int32)(&self.Code))

	}

	return proto.ErrUnknownField
}

type ChatREQ struct {
	Content string
}

func (self *ChatREQ) String() string { return proto.CompactTextString(self) }

func (self *ChatREQ) Size() (ret int) {

	ret += proto.SizeString(1, self.Content)

	return
}

func (self *ChatREQ) Marshal(buffer *proto.Buffer) error {

	proto.MarshalString(buffer, 1, self.Content)

	return nil
}

func (self *ChatREQ) Unmarshal(buffer *proto.Buffer, fieldIndex uint64, wt proto.WireType) error {
	switch fieldIndex {
	case 1:
		return proto.UnmarshalString(buffer, wt, &self.Content)

	}

	return proto.ErrUnknownField
}

type ChatACK struct {
	Content string
}

func (self *ChatACK) String() string { return proto.CompactTextString(self) }

func (self *ChatACK) Size() (ret int) {

	ret += proto.SizeString(1, self.Content)

	return
}

func (self *ChatACK) Marshal(buffer *proto.Buffer) error {

	proto.MarshalString(buffer, 1, self.Content)

	return nil
}

func (self *ChatACK) Unmarshal(buffer *proto.Buffer, fieldIndex uint64, wt proto.WireType) error {
	switch fieldIndex {
	case 1:
		return proto.UnmarshalString(buffer, wt, &self.Content)

	}

	return proto.ErrUnknownField
}

type ClientID struct {
	ID    int64  // 客户端在网关上的SessionID
	SvcID string // 客户端在哪个网关
}

func (self *ClientID) String() string { return proto.CompactTextString(self) }

func (self *ClientID) Size() (ret int) {

	ret += proto.SizeInt64(1, self.ID)

	ret += proto.SizeString(2, self.SvcID)

	return
}

func (self *ClientID) Marshal(buffer *proto.Buffer) error {

	proto.MarshalInt64(buffer, 1, self.ID)

	proto.MarshalString(buffer, 2, self.SvcID)

	return nil
}

func (self *ClientID) Unmarshal(buffer *proto.Buffer, fieldIndex uint64, wt proto.WireType) error {
	switch fieldIndex {
	case 1:
		return proto.UnmarshalInt64(buffer, wt, &self.ID)
	case 2:
		return proto.UnmarshalString(buffer, wt, &self.SvcID)

	}

	return proto.ErrUnknownField
}

type CloseClientACK struct {
	ID  []int64
	All bool
}

func (self *CloseClientACK) String() string { return proto.CompactTextString(self) }

func (self *CloseClientACK) Size() (ret int) {

	ret += proto.SizeInt64Slice(1, self.ID)

	ret += proto.SizeBool(2, self.All)

	return
}

func (self *CloseClientACK) Marshal(buffer *proto.Buffer) error {

	proto.MarshalInt64Slice(buffer, 1, self.ID)

	proto.MarshalBool(buffer, 2, self.All)

	return nil
}

func (self *CloseClientACK) Unmarshal(buffer *proto.Buffer, fieldIndex uint64, wt proto.WireType) error {
	switch fieldIndex {
	case 1:
		return proto.UnmarshalInt64Slice(buffer, wt, &self.ID)
	case 2:
		return proto.UnmarshalBool(buffer, wt, &self.All)

	}

	return proto.ErrUnknownField
}

type ClientClosedACK struct {
	ID ClientID
}

func (self *ClientClosedACK) String() string { return proto.CompactTextString(self) }

func (self *ClientClosedACK) Size() (ret int) {

	ret += proto.SizeStruct(1, &self.ID)

	return
}

func (self *ClientClosedACK) Marshal(buffer *proto.Buffer) error {

	proto.MarshalStruct(buffer, 1, &self.ID)

	return nil
}

func (self *ClientClosedACK) Unmarshal(buffer *proto.Buffer, fieldIndex uint64, wt proto.WireType) error {
	switch fieldIndex {
	case 1:
		return proto.UnmarshalStruct(buffer, wt, &self.ID)

	}

	return proto.ErrUnknownField
}

type RouterTransmitACK struct {
	MsgID        uint32  // 用户消息ID
	MsgData      []byte  // 用户消息数据
	ClientID     int64   // 单发
	ClientIDList []int64 // 列表发
	All          bool    // 全发
}

func (self *RouterTransmitACK) String() string { return proto.CompactTextString(self) }

func (self *RouterTransmitACK) Size() (ret int) {

	ret += proto.SizeUInt32(1, self.MsgID)

	ret += proto.SizeBytes(2, self.MsgData)

	ret += proto.SizeInt64(3, self.ClientID)

	ret += proto.SizeInt64Slice(4, self.ClientIDList)

	ret += proto.SizeBool(5, self.All)

	return
}

func (self *RouterTransmitACK) Marshal(buffer *proto.Buffer) error {

	proto.MarshalUInt32(buffer, 1, self.MsgID)

	proto.MarshalBytes(buffer, 2, self.MsgData)

	proto.MarshalInt64(buffer, 3, self.ClientID)

	proto.MarshalInt64Slice(buffer, 4, self.ClientIDList)

	proto.MarshalBool(buffer, 5, self.All)

	return nil
}

func (self *RouterTransmitACK) Unmarshal(buffer *proto.Buffer, fieldIndex uint64, wt proto.WireType) error {
	switch fieldIndex {
	case 1:
		return proto.UnmarshalUInt32(buffer, wt, &self.MsgID)
	case 2:
		return proto.UnmarshalBytes(buffer, wt, &self.MsgData)
	case 3:
		return proto.UnmarshalInt64(buffer, wt, &self.ClientID)
	case 4:
		return proto.UnmarshalInt64Slice(buffer, wt, &self.ClientIDList)
	case 5:
		return proto.UnmarshalBool(buffer, wt, &self.All)

	}

	return proto.ErrUnknownField
}

type SvcStatusReportACK struct {
	Status SvcStatus
}

func (self *SvcStatusReportACK) String() string { return proto.CompactTextString(self) }

func (self *SvcStatusReportACK) Size() (ret int) {

	ret += proto.SizeStruct(1, &self.Status)

	return
}

func (self *SvcStatusReportACK) Marshal(buffer *proto.Buffer) error {

	proto.MarshalStruct(buffer, 1, &self.Status)

	return nil
}

func (self *SvcStatusReportACK) Unmarshal(buffer *proto.Buffer, fieldIndex uint64, wt proto.WireType) error {
	switch fieldIndex {
	case 1:
		return proto.UnmarshalStruct(buffer, wt, &self.Status)

	}

	return proto.ErrUnknownField
}

// 服务状态
type SvcStatus struct {
	SvcID     string
	UserCount int32
}

func (self *SvcStatus) String() string { return proto.CompactTextString(self) }

func (self *SvcStatus) Size() (ret int) {

	ret += proto.SizeString(1, self.SvcID)

	ret += proto.SizeInt32(2, self.UserCount)

	return
}

func (self *SvcStatus) Marshal(buffer *proto.Buffer) error {

	proto.MarshalString(buffer, 1, self.SvcID)

	proto.MarshalInt32(buffer, 2, self.UserCount)

	return nil
}

func (self *SvcStatus) Unmarshal(buffer *proto.Buffer, fieldIndex uint64, wt proto.WireType) error {
	switch fieldIndex {
	case 1:
		return proto.UnmarshalString(buffer, wt, &self.SvcID)
	case 2:
		return proto.UnmarshalInt32(buffer, wt, &self.UserCount)

	}

	return proto.ErrUnknownField
}

type SvcStatusREQ struct {
	SvcName string
}

func (self *SvcStatusREQ) String() string { return proto.CompactTextString(self) }

func (self *SvcStatusREQ) Size() (ret int) {

	ret += proto.SizeString(1, self.SvcName)

	return
}

func (self *SvcStatusREQ) Marshal(buffer *proto.Buffer) error {

	proto.MarshalString(buffer, 1, self.SvcName)

	return nil
}

func (self *SvcStatusREQ) Unmarshal(buffer *proto.Buffer, fieldIndex uint64, wt proto.WireType) error {
	switch fieldIndex {
	case 1:
		return proto.UnmarshalString(buffer, wt, &self.SvcName)

	}

	return proto.ErrUnknownField
}

type SvcStatusACK struct {
	Status []SvcStatus
}

func (self *SvcStatusACK) String() string { return proto.CompactTextString(self) }

func (self *SvcStatusACK) Size() (ret int) {

	if len(self.Status) > 0 {
		for _, elm := range self.Status {
			ret += proto.SizeStruct(1, &elm)
		}
	}

	return
}

func (self *SvcStatusACK) Marshal(buffer *proto.Buffer) error {

	for _, elm := range self.Status {
		proto.MarshalStruct(buffer, 1, &elm)
	}

	return nil
}

func (self *SvcStatusACK) Unmarshal(buffer *proto.Buffer, fieldIndex uint64, wt proto.WireType) error {
	switch fieldIndex {
	case 1:
		var elm SvcStatus
		if err := proto.UnmarshalStruct(buffer, wt, &elm); err != nil {
			return err
		} else {
			self.Status = append(self.Status, elm)
			return nil
		}

	}

	return proto.ErrUnknownField
}

type HubTransmitACK struct {
	MsgID           uint32 // 用户消息ID
	MsgData         []byte // 用户消息数据
	CallID          int64  // 调用ID
	SrcSvcID        string // 来源服务ID
	TgtSvcID        string // 目标服务ID
	Mode            int32  // 模式 0:上行(请求/通知),  1: 回应
	PassThroughData []byte // 透传数据
	PassThroughType string // 透传类型  透传的不一定是消息, 所以用字符串表示类型
}

func (self *HubTransmitACK) String() string { return proto.CompactTextString(self) }

func (self *HubTransmitACK) Size() (ret int) {

	ret += proto.SizeUInt32(1, self.MsgID)

	ret += proto.SizeBytes(2, self.MsgData)

	ret += proto.SizeInt64(3, self.CallID)

	ret += proto.SizeString(4, self.SrcSvcID)

	ret += proto.SizeString(5, self.TgtSvcID)

	ret += proto.SizeInt32(6, self.Mode)

	ret += proto.SizeBytes(7, self.PassThroughData)

	ret += proto.SizeString(8, self.PassThroughType)

	return
}

func (self *HubTransmitACK) Marshal(buffer *proto.Buffer) error {

	proto.MarshalUInt32(buffer, 1, self.MsgID)

	proto.MarshalBytes(buffer, 2, self.MsgData)

	proto.MarshalInt64(buffer, 3, self.CallID)

	proto.MarshalString(buffer, 4, self.SrcSvcID)

	proto.MarshalString(buffer, 5, self.TgtSvcID)

	proto.MarshalInt32(buffer, 6, self.Mode)

	proto.MarshalBytes(buffer, 7, self.PassThroughData)

	proto.MarshalString(buffer, 8, self.PassThroughType)

	return nil
}

func (self *HubTransmitACK) Unmarshal(buffer *proto.Buffer, fieldIndex uint64, wt proto.WireType) error {
	switch fieldIndex {
	case 1:
		return proto.UnmarshalUInt32(buffer, wt, &self.MsgID)
	case 2:
		return proto.UnmarshalBytes(buffer, wt, &self.MsgData)
	case 3:
		return proto.UnmarshalInt64(buffer, wt, &self.CallID)
	case 4:
		return proto.UnmarshalString(buffer, wt, &self.SrcSvcID)
	case 5:
		return proto.UnmarshalString(buffer, wt, &self.TgtSvcID)
	case 6:
		return proto.UnmarshalInt32(buffer, wt, &self.Mode)
	case 7:
		return proto.UnmarshalBytes(buffer, wt, &self.PassThroughData)
	case 8:
		return proto.UnmarshalString(buffer, wt, &self.PassThroughType)

	}

	return proto.ErrUnknownField
}

type PassThroughWrap struct {
	Int64   int64
	Int32   int32
	Str     string
	Float32 float32
}

func (self *PassThroughWrap) String() string { return proto.CompactTextString(self) }

func (self *PassThroughWrap) Size() (ret int) {

	ret += proto.SizeInt64(1, self.Int64)

	ret += proto.SizeInt32(2, self.Int32)

	ret += proto.SizeString(3, self.Str)

	ret += proto.SizeFloat32(4, self.Float32)

	return
}

func (self *PassThroughWrap) Marshal(buffer *proto.Buffer) error {

	proto.MarshalInt64(buffer, 1, self.Int64)

	proto.MarshalInt32(buffer, 2, self.Int32)

	proto.MarshalString(buffer, 3, self.Str)

	proto.MarshalFloat32(buffer, 4, self.Float32)

	return nil
}

func (self *PassThroughWrap) Unmarshal(buffer *proto.Buffer, fieldIndex uint64, wt proto.WireType) error {
	switch fieldIndex {
	case 1:
		return proto.UnmarshalInt64(buffer, wt, &self.Int64)
	case 2:
		return proto.UnmarshalInt32(buffer, wt, &self.Int32)
	case 3:
		return proto.UnmarshalString(buffer, wt, &self.Str)
	case 4:
		return proto.UnmarshalFloat32(buffer, wt, &self.Float32)

	}

	return proto.ErrUnknownField
}

type ServiceIdentifyACK struct {
	SvcID   string // 服务全局唯一ID
	SvcName string // 服务名
}

func (self *ServiceIdentifyACK) String() string { return proto.CompactTextString(self) }

func (self *ServiceIdentifyACK) Size() (ret int) {

	ret += proto.SizeString(1, self.SvcID)

	ret += proto.SizeString(2, self.SvcName)

	return
}

func (self *ServiceIdentifyACK) Marshal(buffer *proto.Buffer) error {

	proto.MarshalString(buffer, 1, self.SvcID)

	proto.MarshalString(buffer, 2, self.SvcName)

	return nil
}

func (self *ServiceIdentifyACK) Unmarshal(buffer *proto.Buffer, fieldIndex uint64, wt proto.WireType) error {
	switch fieldIndex {
	case 1:
		return proto.UnmarshalString(buffer, wt, &self.SvcID)
	case 2:
		return proto.UnmarshalString(buffer, wt, &self.SvcName)

	}

	return proto.ErrUnknownField
}

type TestREQ struct {
	Dummy string
}

func (self *TestREQ) String() string { return proto.CompactTextString(self) }

func (self *TestREQ) Size() (ret int) {

	ret += proto.SizeString(1, self.Dummy)

	return
}

func (self *TestREQ) Marshal(buffer *proto.Buffer) error {

	proto.MarshalString(buffer, 1, self.Dummy)

	return nil
}

func (self *TestREQ) Unmarshal(buffer *proto.Buffer, fieldIndex uint64, wt proto.WireType) error {
	switch fieldIndex {
	case 1:
		return proto.UnmarshalString(buffer, wt, &self.Dummy)

	}

	return proto.ErrUnknownField
}

type TestACK struct {
	Dummy string
}

func (self *TestACK) String() string { return proto.CompactTextString(self) }

func (self *TestACK) Size() (ret int) {

	ret += proto.SizeString(1, self.Dummy)

	return
}

func (self *TestACK) Marshal(buffer *proto.Buffer) error {

	proto.MarshalString(buffer, 1, self.Dummy)

	return nil
}

func (self *TestACK) Unmarshal(buffer *proto.Buffer, fieldIndex uint64, wt proto.WireType) error {
	switch fieldIndex {
	case 1:
		return proto.UnmarshalString(buffer, wt, &self.Dummy)

	}

	return proto.ErrUnknownField
}

func init() {

	cellnet.RegisterMessageMeta(&cellnet.MessageMeta{
		Codec: codec.MustGetCodec("protoplus"),
		Type:  reflect.TypeOf((*ServerInfo)(nil)).Elem(),
		ID:    0,
	})
	cellnet.RegisterMessageMeta(&cellnet.MessageMeta{
		Codec: codec.MustGetCodec("protoplus"),
		Type:  reflect.TypeOf((*VerifyREQ)(nil)).Elem(),
		ID:    13457,
	})
	cellnet.RegisterMessageMeta(&cellnet.MessageMeta{
		Codec: codec.MustGetCodec("protoplus"),
		Type:  reflect.TypeOf((*VerifyACK)(nil)).Elem(),
		ID:    40824,
	})
	cellnet.RegisterMessageMeta(&cellnet.MessageMeta{
		Codec: codec.MustGetCodec("protoplus"),
		Type:  reflect.TypeOf((*PingACK)(nil)).Elem(),
		ID:    16241,
	})
	cellnet.RegisterMessageMeta(&cellnet.MessageMeta{
		Codec: codec.MustGetCodec("protoplus"),
		Type:  reflect.TypeOf((*LoginREQ)(nil)).Elem(),
		ID:    18837,
	})
	cellnet.RegisterMessageMeta(&cellnet.MessageMeta{
		Codec: codec.MustGetCodec("protoplus"),
		Type:  reflect.TypeOf((*LoginACK)(nil)).Elem(),
		ID:    46204,
	})
	cellnet.RegisterMessageMeta(&cellnet.MessageMeta{
		Codec: codec.MustGetCodec("protoplus"),
		Type:  reflect.TypeOf((*ChatREQ)(nil)).Elem(),
		ID:    29052,
	})
	cellnet.RegisterMessageMeta(&cellnet.MessageMeta{
		Codec: codec.MustGetCodec("protoplus"),
		Type:  reflect.TypeOf((*ChatACK)(nil)).Elem(),
		ID:    56419,
	})
	cellnet.RegisterMessageMeta(&cellnet.MessageMeta{
		Codec: codec.MustGetCodec("protoplus"),
		Type:  reflect.TypeOf((*ClientID)(nil)).Elem(),
		ID:    0,
	})
	cellnet.RegisterMessageMeta(&cellnet.MessageMeta{
		Codec: codec.MustGetCodec("protoplus"),
		Type:  reflect.TypeOf((*CloseClientACK)(nil)).Elem(),
		ID:    58040,
	})
	cellnet.RegisterMessageMeta(&cellnet.MessageMeta{
		Codec: codec.MustGetCodec("protoplus"),
		Type:  reflect.TypeOf((*ClientClosedACK)(nil)).Elem(),
		ID:    50844,
	})
	cellnet.RegisterMessageMeta(&cellnet.MessageMeta{
		Codec: codec.MustGetCodec("protoplus"),
		Type:  reflect.TypeOf((*RouterTransmitACK)(nil)).Elem(),
		ID:    23158,
	})
	cellnet.RegisterMessageMeta(&cellnet.MessageMeta{
		Codec: codec.MustGetCodec("protoplus"),
		Type:  reflect.TypeOf((*SvcStatusReportACK)(nil)).Elem(),
		ID:    27631,
	})
	cellnet.RegisterMessageMeta(&cellnet.MessageMeta{
		Codec: codec.MustGetCodec("protoplus"),
		Type:  reflect.TypeOf((*SvcStatus)(nil)).Elem(),
		ID:    0,
	})
	cellnet.RegisterMessageMeta(&cellnet.MessageMeta{
		Codec: codec.MustGetCodec("protoplus"),
		Type:  reflect.TypeOf((*SvcStatusREQ)(nil)).Elem(),
		ID:    22860,
	})
	cellnet.RegisterMessageMeta(&cellnet.MessageMeta{
		Codec: codec.MustGetCodec("protoplus"),
		Type:  reflect.TypeOf((*SvcStatusACK)(nil)).Elem(),
		ID:    50227,
	})
	cellnet.RegisterMessageMeta(&cellnet.MessageMeta{
		Codec: codec.MustGetCodec("protoplus"),
		Type:  reflect.TypeOf((*HubTransmitACK)(nil)).Elem(),
		ID:    54836,
	})
	cellnet.RegisterMessageMeta(&cellnet.MessageMeta{
		Codec: codec.MustGetCodec("protoplus"),
		Type:  reflect.TypeOf((*PassThroughWrap)(nil)).Elem(),
		ID:    0,
	})
	cellnet.RegisterMessageMeta(&cellnet.MessageMeta{
		Codec: codec.MustGetCodec("protoplus"),
		Type:  reflect.TypeOf((*ServiceIdentifyACK)(nil)).Elem(),
		ID:    33360,
	})
	cellnet.RegisterMessageMeta(&cellnet.MessageMeta{
		Codec: codec.MustGetCodec("protoplus"),
		Type:  reflect.TypeOf((*TestREQ)(nil)).Elem(),
		ID:    47484,
	})
	cellnet.RegisterMessageMeta(&cellnet.MessageMeta{
		Codec: codec.MustGetCodec("protoplus"),
		Type:  reflect.TypeOf((*TestACK)(nil)).Elem(),
		ID:    9315,
	})

}
